---
import { cn } from '@/lib/utils';
import { cva } from 'class-variance-authority';
import { storyblokEditable } from '@storyblok/astro';
import Render from '@/lib/storyblok/Render.astro';
import type { SectionBlockValues, SectionStoryblok } from '@/lib/storyblok/types';

const section = cva('text-darkText-30', {
	variants: {
		color: {
			mint: 'bg-brandMint-100',
			white: 'bg-white',
			rose: 'bg-brandRose-100 text-darkText-20',
			cream: 'bg-brandCream-80',
			lightCream: 'bg-brandCream-40',
			burgundy: 'bg-brandBurgundy-100 text-lightText-30',
			teal: 'bg-brandTeal-100 text-lightText-30',
			yellow: 'bg-brandYellow-100',
			green: 'bg-brandDarkGreen-100 text-lightText-30',
			magenta: 'bg-brandMagenta-80 text-lightText-30',
			transparent: 'bg-transparent',
		},
		padding: {
			none: 'py-0',
			small: 'py-8',
			medium: 'py-16',
			large: 'py-24',
			xlarge: 'py-6 md:py-24 xl:py-48',
		},
		rules: {
			paddingTopOnly: '',
			paddingBottomOnly: '',
			bothSides: '',
		},
	},
	defaultVariants: {
		color: 'white',
		padding: 'medium',
	},
	compoundVariants: [
		{
			rules: 'paddingTopOnly',
			padding: ['small', 'medium', 'large', 'xlarge'],
			class: 'pb-0 sm:pb-0 md:pb-0 lg:pb-0 xl:pb-0 2xl:pb-0 3xl:pb-0 4xl:pb-0',
		},
		{
			rules: 'paddingBottomOnly',
			padding: ['small', 'medium', 'large', 'xlarge'],
			class: 'pt-0 sm:pt-0 md:pt-0 lg:pt-0 xl:pt-0 2xl:pt-0 3xl:pt-0 4xl:pt-0',
		},
	],
});

const container = cva('', {
	variants: {
		container: {
			none: '',
			small:
				'mx-auto px-4 lg:px-2 lg:max-w-[750px] 2xl:max-w-[950px] 3xl:max-w-[1150px] 4xl:max-w-[1350px]',
			medium:
				'mx-auto px-4 lg:px-2 lg:max-w-[950px] xl:max-w-[1150px] 2xl:max-w-[1250px] 3xl:max-w-[1350px] 4xl:max-w-[1500px]',
			large:
				'mx-auto px-4 lg:px-2 lg:max-w-[1150px] 2xl:max-w-[1350px] 3xl:max-w-[1500px] 4xl:max-w-[1700px]',
			xlarge:
				'mx-auto px-4 lg:px-2 lg:max-w-[1350px] 2xl:max-w-[1500px] 3xl:max-w-[1700px] 4xl:max-w-[1900px]',
		},
		gap: {
			none: '',
			small: 'gap-8',
			medium: 'gap-16',
			large: 'gap-24',
			xlarge: 'gap-32',
		},
	},
	defaultVariants: {
		container: 'medium',
		gap: 'none',
	},
});

type Props = {
	blok: SectionStoryblok;
};

const { blok } = Astro.props;
---

<section
	class={cn(
		section({ color: blok.color, padding: blok.padding, rules: blok.paddingRules }),
		`${blok.backgroundImage !== 'none' ? 'relative z-[-2]' : ''}`,
		blok.className && blok.className
	)}
	{...storyblokEditable(blok)}
>
	{
		blok.backgroundImage !== 'none' && (
			<div
				class={cn(
					'absolute inset-0 z-[-1] select-none',
					blok.backgroundImage === 'ribbonTwo' && 'hidden  lg:flex lg:justify-end'
				)}
			>
				<img
					src={`/images/bgs/${blok.backgroundImage}.svg`}
					alt=""
					class={cn(
						'h-full w-full object-cover',
						blok.backgroundImage === 'ribbonTwo' && 'w-4/6 bg-no-repeat object-cover'
					)}
				/>
			</div>
		)
	}
	<div class={cn('flex flex-col', container({ gap: blok.gap, container: blok.container }))}>
		{
			blok.blocks.map((item: SectionBlockValues) => (
				<div>
					<Render blok={item} />
				</div>
			))
		}
	</div>
</section>
